// @generated by protobuf-ts 2.8.0
// @generated from protobuf file "protos/sandbox.proto" (syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Sandbox } from "./sandbox";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { RunCodeResponse } from "./sandbox";
import type { RunCodeRequest } from "./sandbox";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Sandbox service runs the provided code and returns the result
 *
 * @generated from protobuf service Sandbox
 */
export interface ISandboxClient {
    /**
     * @generated from protobuf rpc: RunCode(RunCodeRequest) returns (RunCodeResponse);
     */
    runCode(input: RunCodeRequest, options?: RpcOptions): UnaryCall<RunCodeRequest, RunCodeResponse>;
}
/**
 * Sandbox service runs the provided code and returns the result
 *
 * @generated from protobuf service Sandbox
 */
export class SandboxClient implements ISandboxClient, ServiceInfo {
    typeName = Sandbox.typeName;
    methods = Sandbox.methods;
    options = Sandbox.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: RunCode(RunCodeRequest) returns (RunCodeResponse);
     */
    runCode(input: RunCodeRequest, options?: RpcOptions): UnaryCall<RunCodeRequest, RunCodeResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<RunCodeRequest, RunCodeResponse>("unary", this._transport, method, opt, input);
    }
}
