// @generated by protobuf-ts 2.8.0
// @generated from protobuf file "protos/sandbox.proto" (syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Details and the code itself
 *
 * @generated from protobuf message RunCodeRequest
 */
export interface RunCodeRequest {
    /**
     * @generated from protobuf field: Languages language = 1;
     */
    language: Languages;
    /**
     * @generated from protobuf field: string code = 2;
     */
    code: string;
}
/**
 * Result of code execution
 *
 * @generated from protobuf message RunCodeResponse
 */
export interface RunCodeResponse {
    /**
     * @generated from protobuf field: string result = 1;
     */
    result: string;
}
/**
 * @generated from protobuf enum Languages
 */
export enum Languages {
    /**
     * @generated from protobuf enum value: JAVASCRIPT = 0;
     */
    JAVASCRIPT = 0,
    /**
     * @generated from protobuf enum value: TYPESCRIPT = 1;
     */
    TYPESCRIPT = 1,
    /**
     * @generated from protobuf enum value: GOLANG = 2;
     */
    GOLANG = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class RunCodeRequest$Type extends MessageType<RunCodeRequest> {
    constructor() {
        super("RunCodeRequest", [
            { no: 1, name: "language", kind: "enum", T: () => ["Languages", Languages] },
            { no: 2, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RunCodeRequest>): RunCodeRequest {
        const message = { language: 0, code: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RunCodeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RunCodeRequest): RunCodeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Languages language */ 1:
                    message.language = reader.int32();
                    break;
                case /* string code */ 2:
                    message.code = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RunCodeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Languages language = 1; */
        if (message.language !== 0)
            writer.tag(1, WireType.Varint).int32(message.language);
        /* string code = 2; */
        if (message.code !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.code);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RunCodeRequest
 */
export const RunCodeRequest = new RunCodeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RunCodeResponse$Type extends MessageType<RunCodeResponse> {
    constructor() {
        super("RunCodeResponse", [
            { no: 1, name: "result", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RunCodeResponse>): RunCodeResponse {
        const message = { result: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RunCodeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RunCodeResponse): RunCodeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string result */ 1:
                    message.result = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RunCodeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string result = 1; */
        if (message.result !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.result);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RunCodeResponse
 */
export const RunCodeResponse = new RunCodeResponse$Type();
/**
 * @generated ServiceType for protobuf service Sandbox
 */
export const Sandbox = new ServiceType("Sandbox", [
    { name: "RunCode", options: {}, I: RunCodeRequest, O: RunCodeResponse }
]);
